name: SonarCloud Analysis

on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  sonarcloud:
    name: SonarCloud Code Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better relevancy of analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.17.0'

      - name: Install pnpm
        run: corepack enable && corepack prepare pnpm@10.12.3 --activate

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Run tests with coverage for SonarCloud
      - name: Run tests with coverage
        run: pnpm turbo run test:ci --filter='{packages/*}' --filter='{services/*}' --filter='{apps/web}' --continue
        env:
          CI: true

      # Generate TypeScript compilation info for SonarCloud
      - name: Generate TypeScript info
        run: |
          pnpm turbo run typecheck --filter='{packages/*}' --filter='{services/*}' --filter='{apps/web}' --continue || echo "TypeScript check completed with warnings"

      # Collect coverage reports
      - name: Collect coverage reports
        run: |
          # Create coverage directory
          mkdir -p coverage-reports
          
          # Collect all coverage reports
          find . -name "coverage" -type d -not -path "*/node_modules/*" | while read dir; do
            if [ -f "$dir/lcov.info" ]; then
              cp "$dir/lcov.info" "coverage-reports/lcov-$(basename $(dirname $dir)).info"
            fi
          done
          
          # List collected coverage files
          ls -la coverage-reports/ || echo "No coverage files found"

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=learnednomad_sabron-trip-sync
            -Dsonar.organization=learnednomad
            -Dsonar.sources=apps,services,packages
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/build/**,**/.turbo/**,**/.next/**,**/coverage/**,**/*.test.ts,**/*.test.js,**/*.spec.ts,**/*.spec.js,**/*.d.ts,**/jest.config.*,**/vitest.config.*
            -Dsonar.typescript.lcov.reportPaths=coverage-reports/*.info
            -Dsonar.javascript.lcov.reportPaths=coverage-reports/*.info
            -Dsonar.testExecutionReportPaths=coverage-reports/test-report.xml
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.projectVersion=${{ github.sha }}
            -Dsonar.branch.name=${{ github.ref_name }}

  # Quality Gate check
  quality-gate:
    name: Quality Gate Check
    runs-on: ubuntu-latest
    needs: sonarcloud
    if: github.event_name == 'pull_request'
    steps:
      - name: Wait for Quality Gate
        uses: sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
      - name: Quality Gate Status
        run: |
          echo "SonarCloud Quality Gate Status: ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
          if [ "${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}" != "PASSED" ]; then
            echo "❌ Quality Gate failed!"
            exit 1
          else
            echo "✅ Quality Gate passed!"
          fi