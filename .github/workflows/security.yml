name: Security Analysis

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run security scans daily at 02:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # Dependency vulnerability scanning
  vulnerability-scan:
    name: Vulnerability Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.17.0'

      - name: Install pnpm
        run: corepack enable && corepack prepare pnpm@10.12.3 --activate

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.local/share/pnpm/store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Snyk vulnerability scanning for dependencies
      - name: Run Snyk to check for vulnerabilities (Monorepo)
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=pnpm-lock.yaml
          command: test

      # Snyk code analysis for security issues
      - name: Run Snyk Code Analysis
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
          args: --severity-threshold=high

      # Snyk monitoring (track dependencies over time)
      - name: Monitor dependencies with Snyk
        uses: snyk/actions/node@master
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --file=pnpm-lock.yaml --project-name=sabron-trip-sync

      # Snyk scan for mobile app
      - name: Run Snyk for Mobile App
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=apps/trip-sync-mobile/package.json
          command: test

      # Generate vulnerability report
      - name: Generate Vulnerability Report
        if: always()
        run: |
          echo "## Security Scan Results" > security-report.md
          echo "Scan completed at: $(date)" >> security-report.md
          echo "Branch: ${{ github.ref_name }}" >> security-report.md
          echo "Commit: ${{ github.sha }}" >> security-report.md
          
          # Check if Snyk found any vulnerabilities
          if [ -f snyk-results.json ]; then
            echo "Vulnerabilities found - check Snyk results for details" >> security-report.md
          else
            echo "No critical vulnerabilities detected" >> security-report.md
          fi

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

  # Secret scanning (using truffleHog)
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # License compliance scanning
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.17.0'

      - name: Install pnpm
        run: corepack enable && corepack prepare pnpm@10.12.3 --activate

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check licenses
        run: |
          # Install license checker
          pnpm add -g license-checker
          
          # Generate license report
          license-checker --summary > license-summary.txt
          license-checker --csv > license-report.csv
          
          # Check for forbidden licenses
          FORBIDDEN_LICENSES="GPL-2.0,GPL-3.0,AGPL-1.0,AGPL-3.0"
          if license-checker --excludePrivatePackages --onlyAllow "MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0;Unlicense" --summary; then
            echo "✅ All licenses are compliant"
          else
            echo "❌ License compliance issues found"
            exit 1
          fi

      - name: Upload License Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report
          path: |
            license-summary.txt
            license-report.csv
          retention-days: 30

  # Docker security scanning
  docker-security:
    name: Docker Security
    runs-on: ubuntu-latest
    if: hashFiles('**/Dockerfile') != ''
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          # Build images if Dockerfiles exist
          if [ -f "Dockerfile" ]; then
            docker build -t sabron-trip-sync:latest .
          fi
          if [ -f "apps/web/Dockerfile" ]; then
            docker build -t sabron-web:latest apps/web/
          fi
          if [ -f "services/api/Dockerfile" ]; then
            docker build -t sabron-api:latest services/api/
          fi

      - name: Scan Docker images with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'sabron-trip-sync:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Security summary
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [vulnerability-scan, secret-scanning, license-check]
    if: always()
    steps:
      - name: Security Summary
        run: |
          echo "## 🔒 Security Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.vulnerability-scan.result }}" == "success" ]; then
            echo "| Vulnerability Scan | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Vulnerability Scan | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.secret-scanning.result }}" == "success" ]; then
            echo "| Secret Scanning | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Secret Scanning | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.license-check.result }}" == "success" ]; then
            echo "| License Compliance | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| License Compliance | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Scan completed at: $(date)" >> $GITHUB_STEP_SUMMARY