name: Project Board Automation

on:
  issues:
    types: [opened, closed, labeled, unlabeled]
  pull_request:
    types: [opened, closed, labeled, unlabeled, ready_for_review]

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read

    steps:
      - name: Add to Sabron Trip Sync Project
        uses: actions/add-to-project@v1.0.1
        with:
          project-url: https://github.com/users/learnednomad/projects/4
          github-token: ${{ secrets.GITHUB_TOKEN }}
          labeled: feature:auth,feature:itinerary,feature:visa,feature:cultural,feature:expense,feature:social,feature:maps,feature:booking,feature:safety,feature:offline,feature:analytics,bug,enhancement,security,ci-cd,documentation
          label-operator: OR

      - name: Set Priority Field
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context } = require('@actions/github');
            
            // Extract priority from labels
            const labels = context.payload.issue?.labels || context.payload.pull_request?.labels || [];
            const priorityLabel = labels.find(label => label.name.startsWith('priority:'));
            
            if (priorityLabel) {
              const priority = priorityLabel.name.replace('priority:', '').toLowerCase();
              console.log(`Setting priority to: ${priority}`);
              
              try {
                const projectId = 'PVT_kwHOAPiRE84A9zBn'; // Sabron Trip Sync Development project
                const itemType = context.payload.issue ? 'Issue' : 'PullRequest';
                const itemNumber = context.payload.issue?.number || context.payload.pull_request?.number;
                
                // Query to find the project item
                const findItemQuery = `
                  query($owner: String!, $repo: String!, $number: Int!) {
                    repository(owner: $owner, name: $repo) {
                      ${itemType.toLowerCase()}(number: $number) {
                        projectItems(first: 10) {
                          nodes {
                            id
                            project {
                              id
                            }
                          }
                        }
                      }
                    }
                  }
                `;
                
                const itemResponse = await github.graphql(findItemQuery, {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  number: itemNumber
                });
                
                const projectItems = itemResponse.repository[itemType.toLowerCase()].projectItems.nodes;
                const targetItem = projectItems.find(item => item.project.id === projectId);
                
                if (targetItem) {
                  console.log(`Found project item: ${targetItem.id}`);
                  
                  // Query to get project fields
                  const fieldsQuery = `
                    query($projectId: ID!) {
                      node(id: $projectId) {
                        ... on ProjectV2 {
                          fields(first: 20) {
                            nodes {
                              ... on ProjectV2SingleSelectField {
                                id
                                name
                                options {
                                  id
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  `;
                  
                  const fieldsResponse = await github.graphql(fieldsQuery, {
                    projectId: projectId
                  });
                  
                  const priorityField = fieldsResponse.node.fields.nodes.find(field => 
                    field.name && field.name.toLowerCase().includes('priority')
                  );
                  
                  if (priorityField) {
                    const priorityOption = priorityField.options.find(option => 
                      option.name.toLowerCase() === priority
                    );
                    
                    if (priorityOption) {
                      // Update the project item field
                      const updateMutation = `
                        mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                          updateProjectV2ItemFieldValue(input: {
                            projectId: $projectId
                            itemId: $itemId
                            fieldId: $fieldId
                            value: $value
                          }) {
                            projectV2Item {
                              id
                            }
                          }
                        }
                      `;
                      
                      await github.graphql(updateMutation, {
                        projectId: projectId,
                        itemId: targetItem.id,
                        fieldId: priorityField.id,
                        value: {
                          singleSelectOptionId: priorityOption.id
                        }
                      });
                      
                      console.log(`✅ Set priority to: ${priority}`);
                    } else {
                      console.log(`⚠️ Priority option '${priority}' not found in project`);
                    }
                  } else {
                    console.log('⚠️ Priority field not found in project');
                  }
                } else {
                  console.log('⚠️ Item not found in target project');
                }
              } catch (error) {
                console.error('Error setting priority:', error);
              }
            }

      - name: Set Phase Field
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context } = require('@actions/github');
            
            // Extract phase from labels
            const labels = context.payload.issue?.labels || context.payload.pull_request?.labels || [];
            const phaseLabel = labels.find(label => label.name.startsWith('phase:'));
            
            if (phaseLabel) {
              const phase = phaseLabel.name.replace('phase:', '').toLowerCase();
              console.log(`Setting phase to: ${phase}`);
              
              try {
                const projectId = 'PVT_kwHOAPiRE84A9zBn'; // Sabron Trip Sync Development project
                const itemType = context.payload.issue ? 'Issue' : 'PullRequest';
                const itemNumber = context.payload.issue?.number || context.payload.pull_request?.number;
                
                // Find the project item (similar logic to priority field)
                const findItemQuery = `
                  query($owner: String!, $repo: String!, $number: Int!) {
                    repository(owner: $owner, name: $repo) {
                      ${itemType.toLowerCase()}(number: $number) {
                        projectItems(first: 10) {
                          nodes {
                            id
                            project {
                              id
                            }
                          }
                        }
                      }
                    }
                  }
                `;
                
                const itemResponse = await github.graphql(findItemQuery, {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  number: itemNumber
                });
                
                const projectItems = itemResponse.repository[itemType.toLowerCase()].projectItems.nodes;
                const targetItem = projectItems.find(item => item.project.id === projectId);
                
                if (targetItem) {
                  // Get project fields and update phase
                  const fieldsQuery = `
                    query($projectId: ID!) {
                      node(id: $projectId) {
                        ... on ProjectV2 {
                          fields(first: 20) {
                            nodes {
                              ... on ProjectV2SingleSelectField {
                                id
                                name
                                options {
                                  id
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  `;
                  
                  const fieldsResponse = await github.graphql(fieldsQuery, {
                    projectId: projectId
                  });
                  
                  const phaseField = fieldsResponse.node.fields.nodes.find(field => 
                    field.name && field.name.toLowerCase().includes('phase')
                  );
                  
                  if (phaseField) {
                    const phaseOption = phaseField.options.find(option => 
                      option.name.toLowerCase().includes(phase)
                    );
                    
                    if (phaseOption) {
                      const updateMutation = `
                        mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                          updateProjectV2ItemFieldValue(input: {
                            projectId: $projectId
                            itemId: $itemId
                            fieldId: $fieldId
                            value: $value
                          }) {
                            projectV2Item {
                              id
                            }
                          }
                        }
                      `;
                      
                      await github.graphql(updateMutation, {
                        projectId: projectId,
                        itemId: targetItem.id,
                        fieldId: phaseField.id,
                        value: {
                          singleSelectOptionId: phaseOption.id
                        }
                      });
                      
                      console.log(`✅ Set phase to: ${phase}`);
                    } else {
                      console.log(`⚠️ Phase option '${phase}' not found in project`);
                    }
                  } else {
                    console.log('⚠️ Phase field not found in project');
                  }
                }
              } catch (error) {
                console.error('Error setting phase:', error);
              }
            }

  auto-assign-to-backlog:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: read
    
    if: github.event.action == 'opened'
    
    steps:
      - name: Move New Items to Backlog
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context } = require('@actions/github');
            
            try {
              const projectId = 'PVT_kwHOAPiRE84A9zBn'; // Sabron Trip Sync Development project
              const itemType = context.payload.issue ? 'Issue' : 'PullRequest';
              const itemNumber = context.payload.issue?.number || context.payload.pull_request?.number;
              
              console.log(`Processing new ${itemType.toLowerCase()} #${itemNumber}`);
              
              // Wait a moment for the project automation to add the item
              await new Promise(resolve => setTimeout(resolve, 2000));
              
              // Query to find the project item
              const findItemQuery = `
                query($owner: String!, $repo: String!, $number: Int!) {
                  repository(owner: $owner, name: $repo) {
                    ${itemType.toLowerCase()}(number: $number) {
                      projectItems(first: 10) {
                        nodes {
                          id
                          project {
                            id
                          }
                          fieldValues(first: 10) {
                            nodes {
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                name
                                field {
                                  ... on ProjectV2SingleSelectField {
                                    name
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const itemResponse = await github.graphql(findItemQuery, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                number: itemNumber
              });
              
              const projectItems = itemResponse.repository[itemType.toLowerCase()].projectItems.nodes;
              const targetItem = projectItems.find(item => item.project.id === projectId);
              
              if (targetItem) {
                console.log(`Found project item: ${targetItem.id}`);
                
                // Check if it's already in a status column
                const statusValue = targetItem.fieldValues.nodes.find(field => 
                  field.field && field.field.name && field.field.name.toLowerCase().includes('status')
                );
                
                if (!statusValue || statusValue.name === 'No Status') {
                  // Move to Backlog
                  const fieldsQuery = `
                    query($projectId: ID!) {
                      node(id: $projectId) {
                        ... on ProjectV2 {
                          fields(first: 20) {
                            nodes {
                              ... on ProjectV2SingleSelectField {
                                id
                                name
                                options {
                                  id
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  `;
                  
                  const fieldsResponse = await github.graphql(fieldsQuery, {
                    projectId: projectId
                  });
                  
                  const statusField = fieldsResponse.node.fields.nodes.find(field => 
                    field.name && field.name.toLowerCase().includes('status')
                  );
                  
                  if (statusField) {
                    const backlogOption = statusField.options.find(option => 
                      option.name.toLowerCase().includes('backlog') || option.name.toLowerCase().includes('todo')
                    );
                    
                    if (backlogOption) {
                      const updateMutation = `
                        mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: ProjectV2FieldValue!) {
                          updateProjectV2ItemFieldValue(input: {
                            projectId: $projectId
                            itemId: $itemId
                            fieldId: $fieldId
                            value: $value
                          }) {
                            projectV2Item {
                              id
                            }
                          }
                        }
                      `;
                      
                      await github.graphql(updateMutation, {
                        projectId: projectId,
                        itemId: targetItem.id,
                        fieldId: statusField.id,
                        value: {
                          singleSelectOptionId: backlogOption.id
                        }
                      });
                      
                      console.log(`✅ Moved ${itemType.toLowerCase()} to Backlog`);
                    } else {
                      console.log('⚠️ Backlog status option not found');
                    }
                  } else {
                    console.log('⚠️ Status field not found in project');
                  }
                } else {
                  console.log(`${itemType} already has status: ${statusValue.name}`);
                }
              } else {
                console.log('⚠️ Item not found in target project yet, may need to wait longer');
              }
            } catch (error) {
              console.error('Error moving item to backlog:', error);
            }