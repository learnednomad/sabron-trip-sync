name: Project Board Automation

on:
  issues:
    types: [opened, labeled]  # Only add when opened or labeled
  pull_request:
    types: [opened, labeled, ready_for_review]  # Only add when opened, labeled, or ready for review

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  add-to-project-graphql:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: PVT_kwHOAPiRE84A9zBn  # Sabron Trip Sync Development project
    steps:
      - name: Add to Project via GraphQL
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN }}
          script: |
            const core = require('@actions/core');
            
            console.log('üéØ Project automation workflow started');
            console.log('Event:', context.eventName);
            console.log('Action:', context.payload.action);
            
            // Get the item to add (issue or PR)
            const item = context.payload.issue || context.payload.pull_request;
            if (!item) {
              console.log('No issue or PR found in payload');
              return;
            }
            
            console.log(`Processing ${context.payload.issue ? 'issue' : 'PR'} #${item.number}: ${item.title}`);
            
            // Check if item has relevant labels
            const relevantLabels = [
              'feature:auth', 'feature:itinerary', 'feature:visa', 'feature:cultural',
              'feature:expense', 'feature:social', 'feature:maps', 'feature:booking', 
              'feature:safety', 'feature:offline', 'feature:analytics', 'bug', 
              'enhancement', 'security', 'ci-cd', 'documentation'
            ];
            
            const itemLabels = item.labels?.map(label => label.name) || [];
            const hasRelevantLabel = relevantLabels.some(label => itemLabels.includes(label));
            
            if (!hasRelevantLabel) {
              console.log('Item does not have relevant labels, skipping');
              return;
            }
            
            console.log('‚úÖ Item has relevant labels:', itemLabels);
            
            try {
              const projectId = process.env.PROJECT_ID;
              const itemType = context.payload.issue ? 'Issue' : 'PullRequest';
              const fieldName = itemType === 'Issue' ? 'issue' : 'pullRequest'; // Fix case sensitivity for GraphQL
              const itemNumber = item.number;
              
              // First, check if the item is already in the project
              const checkQuery = `
                query($owner: String!, $repo: String!, $number: Int!) {
                  repository(owner: $owner, name: $repo) {
                    ${fieldName}(number: $number) {
                      id
                      projectItems(first: 10) {
                        nodes {
                          id
                          project {
                            id
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const checkResponse = await github.graphql(checkQuery, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                number: itemNumber
              });
              
              const itemNode = checkResponse.repository[fieldName];
              
              // Add defensive null check
              if (!itemNode) {
                console.log('‚ö†Ô∏è Item not found in repository');
                return;
              }
              const existingProjectItem = itemNode.projectItems.nodes.find(
                projectItem => projectItem.project.id === projectId
              );
              
              if (existingProjectItem) {
                console.log(`‚úÖ Item already exists in project: ${existingProjectItem.id}`);
                return;
              }
              
              // Add item to project
              const addMutation = `
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {
                    projectId: $projectId
                    contentId: $contentId
                  }) {
                    item {
                      id
                    }
                  }
                }
              `;
              
              const addResponse = await github.graphql(addMutation, {
                projectId: projectId,
                contentId: itemNode.id
              });
              
              console.log(`üöÄ Successfully added item to project: ${addResponse.addProjectV2ItemById.item.id}`);
              
            } catch (error) {
              const errorMessage = `Error adding item to project: ${error.message}`;
              console.error('‚ùå', errorMessage);
              console.error('Error details:', {
                message: error.message,
                type: error.type,
                documentation_url: error.documentation_url
              });
              core.setFailed(errorMessage);
            }
