  version: '3.8'

  services:
    api:
      build:
        context: ./services/api
        dockerfile: Dockerfile
      ports:
        - '3000:3000'
      environment:
        - NODE_ENV=production
        - DATABASE_URL=${DATABASE_URL}
        - REDIS_URL=${REDIS_URL}
        - MONGODB_URI=${MONGODB_URI}
        - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3001,http://localhost:19006}
        - SENTRY_DSN=${SENTRY_DSN}
        - SUPABASE_URL=${SUPABASE_URL}
        - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
        - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      depends_on:
        postgres:
          condition: service_healthy
        redis:
          condition: service_healthy
        mongodb:
          condition: service_healthy
      healthcheck:
        test: ['CMD', 'curl', '-f', 'http://localhost:3000/health']
        interval: 30s
        timeout: 10s
        retries: 3
      networks:
        - sabron-network

    web:
      build:
        context: ./apps/web
        dockerfile: Dockerfile
      ports:
        - '3001:3001'
      environment:
        - NODE_ENV=production
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://api:3000}
        - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
        - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
        - NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN}
      depends_on:
        - api
      healthcheck:
        test: ['CMD', 'curl', '-f', 'http://localhost:3001']
        interval: 30s
        timeout: 10s
        retries: 3
      networks:
        - sabron-network

    postgres:
      image: postgres:15
      environment:
        - POSTGRES_USER=user
        - POSTGRES_PASSWORD=password
        - POSTGRES_DB=sabron_trip_sync
      volumes:
        - postgres_data:/var/lib/postgresql/data
      ports:
        - '5432:5432'
      healthcheck:
        test: ['CMD-SHELL', 'pg_isready -U user']
        interval: 10s
        timeout: 5s
        retries: 5
      networks:
        - sabron-network

    redis:
      image: redis:7
      volumes:
        - redis_data:/data
      ports:
        - '6379:6379'
      healthcheck:
        test: ['CMD', 'redis-cli', 'ping']
        interval: 10s
        timeout: 5s
        retries: 5
      networks:
        - sabron-network

    mongodb:
      image: mongo:7
      volumes:
        - mongo_data:/data/db
      ports:
        - '27017:27017'
      healthcheck:
        test: ['CMD', 'mongo', '--eval', 'db.adminCommand("ping")']
        interval: 10s
        timeout: 5s
        retries: 5
      networks:
        - sabron-network

  networks:
    sabron-network:
      driver: bridge

  volumes:
    postgres_data:
    redis_data:
    mongo_data: