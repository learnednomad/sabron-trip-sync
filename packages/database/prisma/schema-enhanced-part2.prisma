// =============================================================================
// PHASE 4: MAPS & BOOKING INTEGRATION
// =============================================================================

// Offline map data management
model OfflineMap {
  id              String          @id @default(cuid())
  region          String          // Geographic region identifier
  boundingBox     Json            // Geographic boundaries
  zoomLevel       Int
  tileData        Json?           // Compressed tile data or storage reference
  fileSize        BigInt?         // Size in bytes
  version         String
  provider        String          @default("mapbox") // mapbox, google, osm
  
  downloadedBy    String[]        @default([])
  downloadCount   Int             @default(0)
  isActive        Boolean         @default(true)
  expiresAt       DateTime?       // Cache expiration
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([region, zoomLevel])
  @@index([expiresAt])
  @@map("offline_maps")
}

// Navigation routes
model Route {
  id              String          @id @default(cuid())
  fromLocation    Json            // Start point coordinates
  toLocation      Json            // End point coordinates
  transportMode   String          // walking, driving, transit, cycling
  routeData       Json            // Full route information
  distance        Float?          // In meters
  duration        Int?            // In seconds
  estimatedCost   Json?           // Cost estimate
  
  // Route optimization
  waypoints       Json[]          @default([])
  avoidTolls      Boolean         @default(false)
  avoidHighways   Boolean         @default(false)
  accessibility   Boolean         @default(false)
  
  provider        String          @default("mapbox")
  isActive        Boolean         @default(true)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([transportMode])
  @@map("routes")
}

// Public transit information
model Transit {
  id              String          @id @default(cuid())
  routeId         String?
  provider        String          // Local transit authority
  type            String          // bus, train, metro, tram, ferry
  lineName        String
  direction       String?
  
  // Schedule information
  schedule        Json            // Timetable data
  realTimeUpdates Json?           // Live updates
  frequency       Int?            // Average frequency in minutes
  operatingHours  Json?
  
  // Route details
  stops           Json[]          @default([])
  serviceArea     Json?           // Geographic coverage
  accessibility   Json?           // Wheelchair, audio announcements, etc.
  
  isActive        Boolean         @default(true)
  lastUpdated     DateTime        @default(now())

  route           Route?          @relation(fields: [routeId], references: [id])

  @@index([provider, type])
  @@index([lineName])
  @@map("transit")
}

// Points of Interest database
model PointOfInterest {
  id              String          @id @default(cuid())
  name            String
  description     String?
  category        String          // restaurant, attraction, hotel, shop, etc.
  subcategory     String?
  
  // Location
  latitude        Float
  longitude       Float
  address         String?
  city            String?
  country         String
  placeId         String?         @unique // Google Places ID or similar
  
  // Business information
  website         String?
  phone           String?
  email           String?
  openingHours    Json?
  priceLevel      String?         // free, $, $$, $$$, $$$$
  
  // User engagement
  rating          Float?
  ratingCount     Int             @default(0)
  photos          Json[]          @default([])
  reviews         Json[]          @default([])
  
  // Features and amenities
  amenities       String[]        @default([])
  accessibility   Json?
  paymentMethods  String[]        @default([])
  
  // Administrative
  isVerified      Boolean         @default(false)
  verifiedBy      String?
  verifiedAt      DateTime?
  isActive        Boolean         @default(true)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([latitude, longitude])
  @@index([category, subcategory])
  @@index([city, country])
  @@index([rating])
  @@map("points_of_interest")
}

// Service provider partners
model Partner {
  id              String          @id @default(cuid())
  name            String
  type            String          // booking_platform, tour_operator, insurance, etc.
  description     String?
  logo            String?
  website         String?
  
  // Integration details
  apiCredentials  Json?           // Encrypted API keys
  apiEndpoints    Json?
  commissionRate  Float?          // Percentage
  paymentTerms    Json?
  
  // Business information
  contactInfo     Json?
  address         Json?
  businessLicense String?
  
  // Partnership details
  status          String          @default("active") // active, inactive, suspended
  contractStart   DateTime?
  contractEnd     DateTime?
  serviceTypes    String[]        @default([])
  
  // Performance metrics
  totalBookings   Int             @default(0)
  totalRevenue    Float           @default(0)
  averageRating   Float?
  
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  bookingProviders BookingProvider[]
  deals           Deal[]

  @@index([type, status])
  @@index([status])
  @@map("partners")
}

// Booking integration providers
model BookingProvider {
  id              String          @id @default(cuid())
  partnerId       String
  serviceType     String          // flights, hotels, activities, insurance
  providerName    String
  
  // Integration configuration
  integrationDetails Json          @default("{}")
  endpoints       Json            @default("{}")
  rateLimits      Json?
  
  // Booking flow
  searchCapability Boolean        @default(true)
  bookingCapability Boolean       @default(true)
  cancellationSupport Boolean     @default(false)
  
  // Performance
  averageResponseTime Int?         // milliseconds
  successRate     Float?          // Percentage
  lastHealthCheck DateTime?
  
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  partner         Partner         @relation(fields: [partnerId], references: [id])

  @@index([serviceType, isActive])
  @@index([partnerId])
  @@map("booking_providers")
}

// Price monitoring and alerts
model PriceAlert {
  id              String          @id @default(cuid())
  userId          String
  searchCriteria  Json            // Flight/hotel search parameters
  targetPrice     Float
  currency        String          @default("USD")
  alertFrequency  String          @default("daily") // immediate, daily, weekly
  
  // Alert configuration
  isActive        Boolean         @default(true)
  expiresAt       DateTime?
  lastChecked     DateTime?
  
  // Price tracking
  currentPrice    Float?
  priceHistory    Json[]          @default([])
  lowestPrice     Float?
  lowestPriceDate DateTime?
  
  // Notifications
  lastAlertSent   DateTime?
  alertsSent      Int             @default(0)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id])

  @@index([userId, isActive])
  @@index([expiresAt])
  @@map("price_alerts")
}

// Special deals and offers
model Deal {
  id              String          @id @default(cuid())
  partnerId       String
  title           String
  description     String
  serviceType     String          // flights, hotels, activities, packages
  
  // Deal details
  discountType    String          // percentage, fixed_amount, bogo
  discountValue   Float
  originalPrice   Float?
  discountedPrice Float?
  currency        String          @default("USD")
  
  // Availability
  validFrom       DateTime
  validUntil      DateTime
  maxRedemptions  Int?
  currentRedemptions Int          @default(0)
  
  // Targeting
  targetAudience  Json?           // Geographic, demographic filters
  minimumSpend    Float?
  
  // Terms and conditions
  terms           String?
  restrictions    Json[]          @default([])
  
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  partner         Partner         @relation(fields: [partnerId], references: [id])

  @@index([serviceType, validFrom, validUntil])
  @@index([isActive, validUntil])
  @@map("deals")
}

// =============================================================================
// PHASE 5: ANALYTICS & ADMINISTRATION
// =============================================================================

// User behavior analytics
model UserAnalytics {
  id              String          @id @default(cuid())
  userId          String
  sessionId       String?
  eventType       String          // page_view, click, booking, search, etc.
  eventCategory   String          // navigation, engagement, conversion
  eventAction     String
  eventLabel      String?
  
  // Event context
  page            String?
  referrer        String?
  device          Json?
  location        Json?
  userAgent       String?
  
  // Custom properties
  properties      Json            @default("{}")
  
  // Performance metrics
  loadTime        Int?            // milliseconds
  timeOnPage      Int?            // seconds
  
  timestamp       DateTime        @default(now())

  user            User            @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
  @@index([eventType, timestamp])
  @@index([timestamp]) // For time-series queries
  @@map("user_analytics")
}

// System event logging
model EventLog {
  id              String          @id @default(cuid())
  eventType       String          // system, user_action, error, security
  severity        String          @default("info") // debug, info, warning, error, critical
  source          String          // api, web, mobile, system
  
  // Event details
  message         String
  details         Json?
  
  // Context
  userId          String?
  sessionId       String?
  ipAddress       String?
  userAgent       String?
  endpoint        String?
  httpMethod      String?
  responseCode    Int?
  
  // Performance
  executionTime   Int?            // milliseconds
  memoryUsage     Int?            // bytes
  
  timestamp       DateTime        @default(now())

  @@index([eventType, timestamp])
  @@index([severity, timestamp])
  @@index([userId, timestamp])
  @@index([timestamp]) // For time-series queries
  @@map("event_logs")
}

// Performance metrics tracking
model PerformanceMetric {
  id              String          @id @default(cuid())
  metricName      String          // api_response_time, db_query_time, etc.
  metricType      String          // gauge, counter, histogram
  value           Float
  unit            String?         // ms, bytes, count, percentage
  
  // Context
  service         String?         // api, web, mobile, database
  endpoint        String?
  operation       String?
  
  // Additional metadata
  tags            Json            @default("{}")
  
  timestamp       DateTime        @default(now())

  @@index([metricName, timestamp])
  @@index([service, timestamp])
  @@index([timestamp])
  @@map("performance_metrics")
}

// Comprehensive audit logging
model AuditLog {
  id              String          @id @default(cuid())
  userId          String?
  action          String          // create, update, delete, login, etc.
  entityType      String          // user, itinerary, booking, etc.
  entityId        String?
  
  // Change tracking
  oldValues       Json?
  newValues       Json?
  changedFields   String[]        @default([])
  
  // Request context
  ipAddress       String?
  userAgent       String?
  sessionId       String?
  endpoint        String?
  httpMethod      String?
  
  // Administrative
  reason          String?         // For admin actions
  success         Boolean         @default(true)
  errorMessage    String?
  
  timestamp       DateTime        @default(now())

  user            User?           @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
  @@index([entityType, entityId])
  @@index([action, timestamp])
  @@index([timestamp])
  @@map("audit_logs")
}

// Customer support system
model SupportTicket {
  id              String          @id @default(cuid())
  userId          String
  ticketNumber    String          @unique
  subject         String
  description     String
  category        String          // technical, billing, general, bug_report
  priority        String          @default("normal") // low, normal, high, urgent
  status          String          @default("open") // open, in_progress, resolved, closed
  
  // Assignment
  assignedTo      String?         // Support agent ID
  assignedAt      DateTime?
  
  // Resolution
  resolution      String?
  resolvedAt      DateTime?
  resolvedBy      String?
  
  // Additional information
  attachments     Json[]          @default([])
  tags            String[]        @default([])
  
  // Internal notes
  internalNotes   Json[]          @default([])
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id])
  messages        SupportMessage[]

  @@index([userId, status])
  @@index([status, priority])
  @@index([assignedTo, status])
  @@map("support_tickets")
}

// Support ticket messages
model SupportMessage {
  id              String          @id @default(cuid())
  ticketId        String
  senderId        String?         // User or support agent
  senderType      String          // user, agent, system
  message         String
  attachments     Json[]          @default([])
  isInternal      Boolean         @default(false)
  
  createdAt       DateTime        @default(now())

  ticket          SupportTicket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId, createdAt])
  @@map("support_messages")
}

// Emergency contacts management
model EmergencyContact {
  id              String          @id @default(cuid())
  userId          String
  name            String
  relationship    String          // family, friend, colleague, etc.
  phoneNumber     String
  email           String?
  address         Json?
  notes           String?
  
  // Contact preferences
  isPrimary       Boolean         @default(false)
  allowedToContact Boolean        @default(true)
  preferredContactMethod String   @default("phone") // phone, email, both
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isPrimary])
  @@map("emergency_contacts")
}

// Weather data caching
model WeatherData {
  id              String          @id @default(cuid())
  locationId      String?
  latitude        Float
  longitude       Float
  
  // Current weather
  current         Json?
  
  // Forecast data
  hourlyForecast  Json[]          @default([])
  dailyForecast   Json[]          @default([])
  
  // Weather alerts
  alerts          Json[]          @default([])
  warnings        Json[]          @default([])
  
  // Data source
  provider        String          @default("openweather")
  
  lastUpdated     DateTime        @default(now())
  expiresAt       DateTime

  @@index([latitude, longitude])
  @@index([locationId])
  @@index([expiresAt])
  @@map("weather_data")
}

// Government travel advisories
model TravelAdvisory {
  id              String          @id @default(cuid())
  countryCode     String
  issuingCountry  String          // Country issuing the advisory
  level           String          // normal, caution, avoid, do_not_travel
  title           String
  summary         String
  details         String?
  
  // Specific risks
  riskCategories  String[]        @default([]) // health, security, natural_disaster, etc.
  regions         String[]        @default([]) // Specific regions if not country-wide
  
  // Validity
  issuedAt        DateTime
  lastUpdated     DateTime        @default(now())
  expiresAt       DateTime?
  
  // Source information
  sourceUrl       String?
  sourceAgency    String?
  
  isActive        Boolean         @default(true)

  country         Country         @relation(fields: [countryCode], references: [code])

  @@index([countryCode, level])
  @@index([issuingCountry])
  @@index([lastUpdated])
  @@map("travel_advisories")
}

// =============================================================================
// EXISTING MODELS (Enhanced versions)
// =============================================================================

// Keep existing models with enhancements already defined above
// (Collaborator, Traveler, Transportation, Accommodation, Booking, Payment, Review, Notification, Follow, Block, Report, TravelLogEntry, Location)

// =============================================================================
// ADDITIONAL SYSTEM MODELS
// =============================================================================

// System configuration
model SystemSetting {
  id              String          @id @default(cuid())
  key             String          @unique
  value           Json
  description     String?
  category        String          @default("general")
  isPublic        Boolean         @default(false)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([category])
  @@map("system_settings")
}

// Feature flags
model FeatureFlag {
  id              String          @id @default(cuid())
  name            String          @unique
  description     String?
  isEnabled       Boolean         @default(false)
  
  // Targeting
  userPercentage  Float?          // Percentage of users to enable for
  targetUsers     String[]        @default([])
  targetGroups    String[]        @default([])
  
  // Environment
  environment     String[]        @default(["production"])
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([isEnabled])
  @@map("feature_flags")
}

// File storage metadata
model MediaFile {
  id              String          @id @default(cuid())
  userId          String?
  filename        String
  originalName    String
  mimeType        String
  size            BigInt
  
  // Storage information
  storageProvider String          @default("s3") // s3, cloudinary, local
  storagePath     String
  storageUrl      String?
  
  // Image-specific metadata
  width           Int?
  height          Int?
  
  // Processing
  isProcessed     Boolean         @default(true)
  processingStatus String?        // pending, processing, completed, failed
  thumbnails      Json[]          @default([])
  
  // Security
  isPublic        Boolean         @default(false)
  accessToken     String?
  
  // Context
  entityType      String?         // post, profile, activity, etc.
  entityId        String?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([userId])
  @@index([entityType, entityId])
  @@index([storageProvider])
  @@map("media_files")
}