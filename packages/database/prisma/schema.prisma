generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id              String           @id @default(cuid())
  email           String           @unique
  username        String?          @unique
  name            String
  bio             String?
  avatar          String?
  coverImage      String?
  dateOfBirth     DateTime?
  phoneNumber     String?
  phoneVerified   Boolean          @default(false)
  emailVerified   Boolean          @default(false)
  isActive        Boolean          @default(true)
  lastActiveAt    DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  profile         UserProfile?
  preferences     UserPreferences?
  settings        UserSettings?
  subscription    UserSubscription?
  sessions        Session[]
  itineraries     Itinerary[]
  activities      Activity[]       @relation("ActivityCreator")
  collaborations  Collaborator[]  @relation("CollaboratorUser")
  invitedCollaborators Collaborator[] @relation("CollaboratorInvitedBy")
  travelers       Traveler[]
  reviews         Review[]
  bookings        Booking[]
  payments        Payment[]
  notifications   Notification[]
  following       Follow[]         @relation("Following")
  followers       Follow[]         @relation("Followers")
  blockedUsers    Block[]          @relation("Blocker")
  blockedBy       Block[]          @relation("Blocked")
  reports         Report[]         @relation("Reporter")
  reportedContent Report[]         @relation("ReportedUser")
  resolvedReports Report[]         @relation("ReportResolver")

  @@index([email])
  @@index([username])
  @@index([isActive, lastActiveAt])
}

// User Profile
model UserProfile {
  id              String          @id @default(cuid())
  userId          String          @unique
  firstName       String
  lastName        String
  displayName     String?
  gender          String?
  nationality     String?
  languages       String[]
  occupation      String?
  company         String?
  website         String?
  socialMedia     Json?
  emergencyContact Json?
  address         Json?

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User Preferences
model UserPreferences {
  id                String          @id @default(cuid())
  userId            String          @unique
  language          String          @default("en")
  currency          String          @default("USD")
  timezone          String          @default("UTC")
  dateFormat        String          @default("MM/DD/YYYY")
  timeFormat        String          @default("12h")
  measurementUnit   String          @default("metric")
  theme             String          @default("system")
  emailNotifications Json           @default("{}")
  pushNotifications  Json           @default("{}")
  travelPreferences  Json           @default("{}")

  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User Settings
model UserSettings {
  id              String          @id @default(cuid())
  userId          String          @unique
  privacy         Json            @default("{}")
  security        Json            @default("{}")
  dataSharing     Json            @default("{}")
  accessibility   Json            @default("{}")

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// User Subscription
model UserSubscription {
  id              String          @id @default(cuid())
  userId          String          @unique
  tier            String          @default("free")
  status          String          @default("active")
  startDate       DateTime        @default(now())
  endDate         DateTime?
  autoRenew       Boolean         @default(true)
  paymentMethod   Json?
  billingHistory  Json[]

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Session
model Session {
  id              String          @id @default(cuid())
  userId          String
  token           String          @unique
  expiresAt       DateTime
  ipAddress       String?
  userAgent       String?
  deviceId        String?
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  lastActiveAt    DateTime        @default(now())

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId, isActive])
}

// Itinerary
model Itinerary {
  id              String          @id @default(cuid())
  userId          String
  title           String
  description     String?
  coverImage      Json?
  destinations    Json[]
  startDate       DateTime
  endDate         DateTime
  duration        Int
  status          String          @default("draft")
  visibility      String          @default("private")
  tags            String[]
  budget          Json?
  notes           String?
  customFields    Json?
  stats           Json            @default("{}")
  sharing         Json?
  isTemplate      Boolean         @default(false)
  templateCategory String?
  version         Int             @default(1)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id])
  activities      Activity[]
  collaborators   Collaborator[]
  travelers       Traveler[]
  transportation  Transportation[]
  accommodations  Accommodation[]

  @@index([userId, status])
  @@index([startDate, endDate])
}

// Activity
model Activity {
  id              String          @id @default(cuid())
  itineraryId      String
  title           String
  description     String?
  location        Json
  startTime       DateTime
  endTime         DateTime
  duration        Int
  category        String
  subcategory     String?
  status          String          @default("planned")
  priority        String          @default("optional")
  bookingInfo     Json?
  cost            Json?
  participants    Json[]
  notes           String?
  tags            String[]
  images          Json[]
  attachments     Json[]
  weather         Json?
  transportation  Json?
  accessibility   Json?
  reminders        Json[]
  isRecurring     Boolean         @default(false)
  recurringPattern Json?
  createdBy       String
  lastModifiedBy  String?
  customFields    Json?
  linkedActivities String[]
  source          Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  itinerary       Itinerary       @relation(fields: [itineraryId], references: [id])
  creator         User            @relation("ActivityCreator", fields: [createdBy], references: [id])

  @@index([itineraryId])
  @@index([startTime])
}

// Collaborator
model Collaborator {
  id              String          @id @default(cuid())
  itineraryId     String
  userId          String
  role            String
  permissions     String[]
  invitedBy       String
  joinedAt        DateTime        @default(now())
  lastActiveAt    DateTime?

  itinerary       Itinerary       @relation(fields: [itineraryId], references: [id])
  user            User            @relation("CollaboratorUser", fields: [userId], references: [id])
  invitedByUser   User            @relation("CollaboratorInvitedBy", fields: [invitedBy], references: [id])

  @@index([itineraryId, userId])
}

// Traveler
model Traveler {
  id              String          @id @default(cuid())
  itineraryId     String
  userId          String?
  name            String
  email           String?
  role            String
  status          String          @default("invited")
  joinedAt        DateTime        @default(now())
  preferences     Json?

  itinerary       Itinerary       @relation(fields: [itineraryId], references: [id])
  user            User?           @relation(fields: [userId], references: [id])

  @@index([itineraryId])
}

// Transportation
model Transportation {
  id              String          @id @default(cuid())
  itineraryId     String
  type            String
  from            String
  to              String
  departure       DateTime
  arrival         DateTime
  carrier         String?
  bookingReference String?
  cost            Json?
  notes           String?
  documents       Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  itinerary       Itinerary       @relation(fields: [itineraryId], references: [id])

  @@index([itineraryId])
}

// Accommodation
model Accommodation {
  id              String          @id @default(cuid())
  itineraryId     String
  name            String
  type            String
  address         String
  checkIn         DateTime
  checkOut        DateTime
  confirmationNumber String?
  cost            Json?
  amenities       String[]
  notes           String?
  contact         Json?
  documents       Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  itinerary       Itinerary       @relation(fields: [itineraryId], references: [id])

  @@index([itineraryId])
}

// Booking
model Booking {
  id              String          @id @default(cuid())
  userId          String
  type            String
  status          String          @default("pending")
  referenceNumber String
  provider        Json
  details         Json
  travelers       Json[]
  pricing         Json
  payment         Json?
  policies        Json
  documents       Json[]
  timeline        Json
  contact         Json
  notes           String?
  metadata        Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id])

  @@index([userId, status])
}

// Payment
model Payment {
  id              String          @id @default(cuid())
  userId          String
  type            String
  method          String
  amount          Json
  status          String
  reference       Json
  paymentDetails  Json
  metadata        Json?
  processedAt     DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id])

  @@index([userId, status])
}

// Review
model Review {
  id              String          @id @default(cuid())
  userId          String
  entityId        String
  entityType      String
  rating          Float
  title           String?
  content         String
  pros            String[]
  cons            String[]
  visitedAt       DateTime
  images          Json[]
  helpful         Int             @default(0)
  verified        Boolean         @default(false)
  response        Json?
  status          String          @default("pending")
  tags            String[]
  helpfulUsers    String[]
  reportedCount   Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id])

  @@index([entityId, entityType])
}

// Notification
model Notification {
  id              String          @id @default(cuid())
  userId          String
  type            String
  channel         String
  status          String
  priority        String
  title           String
  message         String
  entity          Json?
  actions         Json[]
  readAt          DateTime?
  sentAt          DateTime?
  deliveredAt     DateTime?
  metadata        Json?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id])

  @@index([userId, status])
}

// Follow
model Follow {
  id              String          @id @default(cuid())
  followerId      String
  followingId     String
  createdAt       DateTime        @default(now())

  follower        User            @relation("Followers", fields: [followerId], references: [id])
  following       User            @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

// Block
model Block {
  id              String          @id @default(cuid())
  blockerId       String
  blockedId       String
  reason          String?
  createdAt       DateTime        @default(now())

  blocker         User            @relation("Blocker", fields: [blockerId], references: [id])
  blocked         User            @relation("Blocked", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId])
}

// Report
model Report {
  id              String          @id @default(cuid())
  reporterId      String
  reportedUserId  String
  reason          String
  description     String
  status          String          @default("pending")
  evidence        Json?
  createdAt       DateTime        @default(now())
  resolvedAt      DateTime?
  resolvedById    String?

  reporter        User            @relation("Reporter", fields: [reporterId], references: [id])
  reportedUser    User            @relation("ReportedUser", fields: [reportedUserId], references: [id])
  resolvedBy      User?           @relation("ReportResolver", fields: [resolvedById], references: [id])

  @@index([reporterId])
  @@index([reportedUserId])
}
