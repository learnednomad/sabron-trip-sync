// Enhanced TravelSync Database Schema
// Comprehensive schema supporting all requirements for 100k+ users
generator client {
  provider = "prisma-client-js"
}

generator backup {
  provider = "prisma-client-js"
  output   = "./generated/backup-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// PHASE 1: ENHANCED CORE MODELS
// =============================================================================

// Enhanced User model with nationality, passport, emergency contacts, GDPR
model User {
  id              String           @id @default(cuid())
  email           String           @unique
  username        String?          @unique
  name            String
  bio             String?
  avatar          String?
  coverImage      String?
  dateOfBirth     DateTime?
  phoneNumber     String?
  phoneVerified   Boolean          @default(false)
  emailVerified   Boolean          @default(false)
  isActive        Boolean          @default(true)
  lastActiveAt    DateTime?
  
  // Enhanced fields for visa and travel requirements
  nationality     String?          // Required for visa lookup
  passportNumber  String?          // Encrypted field
  passportExpiry  DateTime?
  passportIssued  String?          // Issuing country
  
  // GDPR and compliance
  gdprConsent     Boolean          @default(false)
  gdprConsentDate DateTime?
  dataRetentionConsent Boolean     @default(true)
  marketingConsent Boolean         @default(false)
  
  // Security and audit
  twoFactorEnabled Boolean         @default(false)
  twoFactorSecret String?          // Encrypted
  lastPasswordChange DateTime?
  failedLoginAttempts Int          @default(0)
  lockedUntil     DateTime?
  ipWhitelist     String[]         @default([])
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?        // Soft delete

  // Relations
  profile         UserProfile?
  preferences     UserPreferences?
  settings        UserSettings?
  subscription    UserSubscription?
  sessions        Session[]
  itineraries     Itinerary[]
  activities      Activity[]       @relation("ActivityCreator")
  collaborations  Collaborator[]   @relation("CollaboratorUser")
  invitedCollaborators Collaborator[] @relation("CollaboratorInvitedBy")
  travelers       Traveler[]
  reviews         Review[]
  bookings        Booking[]
  payments        Payment[]
  notifications   Notification[]
  following       Follow[]         @relation("Following")
  followers       Follow[]         @relation("Followers")
  blockedUsers    Block[]          @relation("Blocker")
  blockedBy       Block[]          @relation("Blocked")
  reports         Report[]         @relation("Reporter")
  reportedContent Report[]         @relation("ReportedUser")
  resolvedReports Report[]         @relation("ReportResolver")
  travelLogEntries TravelLogEntry[]
  
  // New relations
  expenses        Expense[]
  expenseSplits   ExpenseSplit[]
  posts           Post[]
  comments        Comment[]
  likes           Like[]
  messages        Message[]
  chatRoomMembers ChatRoomMember[]
  emergencyContacts EmergencyContact[]
  visaApplications VisaApplication[]
  culturalTips    CulturalTip[]
  supportTickets  SupportTicket[]
  priceAlerts     PriceAlert[]
  userAnalytics   UserAnalytics[]
  auditLogs       AuditLog[]

  @@index([email])
  @@index([username])
  @@index([isActive, lastActiveAt])
  @@index([nationality]) // For visa requirements
  @@index([deletedAt]) // For soft deletes
  @@map("users")
}

// Enhanced User Profile with emergency contacts
model UserProfile {
  id              String          @id @default(cuid())
  userId          String          @unique
  firstName       String
  lastName        String
  displayName     String?
  gender          String?
  nationality     String?
  languages       String[]        @default([])
  occupation      String?
  company         String?
  website         String?
  socialMedia     Json?
  address         Json?
  
  // Travel-specific profile data
  travelStyle     String?         // backpacker, luxury, business, family
  dietaryRestrictions String[]    @default([])
  healthConditions String[]       @default([])
  accessibilityNeeds Json?
  travelDocuments Json?           // Passport, visa, insurance info
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_profiles")
}

// Enhanced User Preferences
model UserPreferences {
  id                String          @id @default(cuid())
  userId            String          @unique
  language          String          @default("en")
  currency          String          @default("USD")
  timezone          String          @default("UTC")
  dateFormat        String          @default("MM/DD/YYYY")
  timeFormat        String          @default("12h")
  measurementUnit   String          @default("metric")
  theme             String          @default("system")
  emailNotifications Json           @default("{}")
  pushNotifications  Json           @default("{}")
  travelPreferences  Json           @default("{}")
  
  // Enhanced preferences
  privacySettings   Json            @default("{}")
  bookingPreferences Json           @default("{}")
  mapPreferences    Json            @default("{}")
  accessibilitySettings Json        @default("{}")
  
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_preferences")
}

// Enhanced User Settings with GDPR compliance
model UserSettings {
  id              String          @id @default(cuid())
  userId          String          @unique
  privacy         Json            @default("{}")
  security        Json            @default("{}")
  dataSharing     Json            @default("{}")
  accessibility   Json            @default("{}")
  
  // GDPR and compliance settings
  dataExportRequests Json[]        @default([])
  dataDeletionRequests Json[]      @default([])
  consentHistory  Json[]          @default([])
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_settings")
}

// Enhanced User Subscription
model UserSubscription {
  id              String          @id @default(cuid())
  userId          String          @unique
  tier            String          @default("free") // free, premium, business
  status          String          @default("active") // active, inactive, cancelled, expired
  startDate       DateTime        @default(now())
  endDate         DateTime?
  autoRenew       Boolean         @default(true)
  paymentMethod   Json?
  billingHistory  Json[]          @default([])
  
  // Enhanced subscription features
  featuresEnabled Json            @default("{}")
  usageLimits     Json            @default("{}")
  currentUsage    Json            @default("{}")
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_subscriptions")
}

// Enhanced Session with device tracking
model Session {
  id              String          @id @default(cuid())
  userId          String
  token           String          @unique
  expiresAt       DateTime
  ipAddress       String?
  userAgent       String?
  deviceId        String?
  deviceType      String?         // mobile, tablet, desktop
  platform        String?         // ios, android, web
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  lastActiveAt    DateTime        @default(now())
  
  // Enhanced session data
  location        Json?           // Geo location data
  securityFlags   Json            @default("{}")

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId, isActive])
  @@index([expiresAt])
  @@map("sessions")
}

// Enhanced Itinerary with version control and collaboration
model Itinerary {
  id              String          @id @default(cuid())
  userId          String
  title           String
  description     String?
  coverImage      Json?
  destinations    Json[]          @default([])
  startDate       DateTime
  endDate         DateTime
  duration        Int
  status          String          @default("draft") // draft, active, completed, cancelled
  visibility      String          @default("private") // private, friends, public
  tags            String[]        @default([])
  budget          Json?
  notes           String?
  customFields    Json?
  stats           Json            @default("{}")
  sharing         Json?
  isTemplate      Boolean         @default(false)
  templateCategory String?
  
  // Enhanced collaboration features
  version         Int             @default(1)
  versionHistory  Json[]          @default([])
  collaborationSettings Json      @default("{}")
  lastEditedBy    String?
  lastEditedAt    DateTime?
  
  // Template marketplace features
  templateRating  Float?
  templateDownloads Int           @default(0)
  templatePrice   Json?           // For premium templates
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?       // Soft delete

  user            User            @relation(fields: [userId], references: [id])
  activities      Activity[]
  collaborators   Collaborator[]
  travelers       Traveler[]
  transportation  Transportation[]
  accommodations  Accommodation[]
  expenses        Expense[]
  budgets         Budget[]

  @@index([userId, status])
  @@index([startDate, endDate])
  @@index([isTemplate, templateCategory])
  @@index([visibility, status])
  @@index([deletedAt])
  @@map("itineraries")
}

// Enhanced Activity with safety, weather, and booking integration
model Activity {
  id              String          @id @default(cuid())
  itineraryId     String
  title           String
  description     String?
  location        Json
  startTime       DateTime
  endTime         DateTime
  duration        Int
  category        String
  subcategory     String?
  status          String          @default("planned") // planned, confirmed, completed, cancelled
  priority        String          @default("optional") // required, recommended, optional
  bookingInfo     Json?
  cost            Json?
  participants    Json[]          @default([])
  notes           String?
  tags            String[]        @default([])
  images          Json[]          @default([])
  attachments     Json[]          @default([])
  
  // Enhanced activity features
  weather         Json?           // Weather data integration
  transportation  Json?           // Transport to/from activity
  accessibility   Json?           // Accessibility information
  reminders       Json[]          @default([])
  isRecurring     Boolean         @default(false)
  recurringPattern Json?
  safetyRating    Float?          // Safety score 1-5
  difficultyLevel String?         // easy, moderate, challenging, expert
  ageRestrictions Json?
  equipmentNeeded String[]        @default([])
  
  // Booking integration
  bookingStatus   String?         // pending, confirmed, failed, cancelled
  bookingReference String?
  bookingProvider String?
  cancellationPolicy Json?
  
  createdBy       String
  lastModifiedBy  String?
  customFields    Json?
  linkedActivities String[]       @default([])
  source          Json?
  
  // Enhanced location fields
  latitude        Float?
  longitude       Float?
  locationName    String?
  address         String?
  placeId         String?
  visitDate       DateTime?
  rating          Float?
  visitNotes      String?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?       // Soft delete

  itinerary       Itinerary       @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  creator         User            @relation("ActivityCreator", fields: [createdBy], references: [id])
  travelLogEntry  TravelLogEntry?
  expenses        Expense[]

  @@index([itineraryId])
  @@index([startTime])
  @@index([latitude, longitude])
  @@index([locationName])
  @@index([category, subcategory])
  @@index([status, priority])
  @@index([deletedAt])
  @@map("activities")
}

// =============================================================================
// PHASE 2: FINANCIAL & SOCIAL SYSTEMS
// =============================================================================

// Comprehensive expense tracking
model Expense {
  id              String          @id @default(cuid())
  itineraryId     String?
  activityId      String?
  userId          String          // Who paid initially
  amount          Float
  currency        String          @default("USD")
  originalAmount  Float?          // If converted from another currency
  originalCurrency String?
  exchangeRate    Float?
  category        String          // food, transport, accommodation, activity, etc.
  subcategory     String?
  description     String
  merchantName    String?
  location        Json?
  paymentMethod   String?         // cash, card, digital
  receipt         Json?           // Receipt image/data
  isRecurring     Boolean         @default(false)
  recurringPattern Json?
  tags            String[]        @default([])
  notes           String?
  
  // Tax and business features
  taxAmount       Float?
  taxRate         Float?
  isBusinessExpense Boolean       @default(false)
  expenseType     String          @default("personal") // personal, business, shared
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?

  itinerary       Itinerary?      @relation(fields: [itineraryId], references: [id])
  activity        Activity?       @relation(fields: [activityId], references: [id])
  paidBy          User            @relation(fields: [userId], references: [id])
  splits          ExpenseSplit[]

  @@index([itineraryId, category])
  @@index([userId, createdAt])
  @@index([category, createdAt])
  @@index([deletedAt])
  @@map("expenses")
}

// Group expense splitting
model ExpenseSplit {
  id              String          @id @default(cuid())
  expenseId       String
  userId          String
  amount          Float           // Amount this user owes
  percentage      Float?          // Percentage of total expense
  isSettled       Boolean         @default(false)
  settledAt       DateTime?
  settledMethod   String?         // cash, transfer, app
  notes           String?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  expense         Expense         @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id])

  @@unique([expenseId, userId])
  @@index([userId, isSettled])
  @@map("expense_splits")
}

// Trip budget management
model Budget {
  id              String          @id @default(cuid())
  itineraryId     String
  totalAmount     Float
  currency        String          @default("USD")
  categoryLimits  Json            @default("{}")
  currentSpent    Float           @default(0)
  lastCalculated  DateTime        @default(now())
  isShared        Boolean         @default(false)
  alerts          Json            @default("{}")
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  itinerary       Itinerary       @relation(fields: [itineraryId], references: [id], onDelete: Cascade)

  @@unique([itineraryId])
  @@map("budgets")
}

// Currency exchange rates
model Currency {
  id              String          @id @default(cuid())
  code            String          @unique // USD, EUR, GBP, etc.
  name            String
  symbol          String
  rateToUSD       Float           // Exchange rate to USD
  lastUpdated     DateTime        @default(now())
  isActive        Boolean         @default(true)
  
  @@index([code])
  @@index([lastUpdated])
  @@map("currencies")
}

// Social activity feed
model Post {
  id              String          @id @default(cuid())
  userId          String
  itineraryId     String?
  activityId      String?
  content         String
  mediaFiles      Json[]          @default([])
  location        Json?
  visibility      String          @default("friends") // public, friends, private
  type            String          @default("general") // general, checkin, review, tip
  tags            String[]        @default([])
  
  // Engagement metrics
  likesCount      Int             @default(0)
  commentsCount   Int             @default(0)
  sharesCount     Int             @default(0)
  
  // Moderation
  isModerated     Boolean         @default(false)
  moderatedAt     DateTime?
  moderatedBy     String?
  moderationNotes String?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?

  user            User            @relation(fields: [userId], references: [id])
  comments        Comment[]
  likes           Like[]

  @@index([userId, createdAt])
  @@index([visibility, createdAt])
  @@index([type, createdAt])
  @@index([deletedAt])
  @@map("posts")
}

// Comments on posts
model Comment {
  id              String          @id @default(cuid())
  postId          String
  userId          String
  parentId        String?         // For threaded comments
  content         String
  mediaFiles      Json[]          @default([])
  
  // Engagement
  likesCount      Int             @default(0)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?

  post            Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id])
  parent          Comment?        @relation("CommentReplies", fields: [parentId], references: [id])
  replies         Comment[]       @relation("CommentReplies")
  likes           Like[]

  @@index([postId, createdAt])
  @@index([userId])
  @@index([parentId])
  @@index([deletedAt])
  @@map("comments")
}

// Likes for posts and comments
model Like {
  id              String          @id @default(cuid())
  userId          String
  entityId        String          // Post or Comment ID
  entityType      String          // "post" or "comment"
  
  createdAt       DateTime        @default(now())

  user            User            @relation(fields: [userId], references: [id])
  post            Post?           @relation(fields: [entityId], references: [id], onDelete: Cascade)
  comment         Comment?        @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@unique([userId, entityId, entityType])
  @@index([entityId, entityType])
  @@map("likes")
}

// Group messaging system
model ChatRoom {
  id              String          @id @default(cuid())
  itineraryId     String?
  name            String?
  description     String?
  type            String          @default("group") // group, direct
  isActive        Boolean         @default(true)
  settings        Json            @default("{}")
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  members         ChatRoomMember[]
  messages        Message[]

  @@index([itineraryId])
  @@index([type, isActive])
  @@map("chat_rooms")
}

// Chat room membership
model ChatRoomMember {
  id              String          @id @default(cuid())
  chatRoomId      String
  userId          String
  role            String          @default("member") // admin, member
  joinedAt        DateTime        @default(now())
  lastReadAt      DateTime?
  isActive        Boolean         @default(true)
  
  chatRoom        ChatRoom        @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id])

  @@unique([chatRoomId, userId])
  @@index([userId])
  @@map("chat_room_members")
}

// Messages in chat rooms
model Message {
  id              String          @id @default(cuid())
  chatRoomId      String
  senderId        String
  content         String?
  messageType     String          @default("text") // text, image, file, location, system
  mediaFiles      Json[]          @default([])
  metadata        Json?           // For special message types
  
  // Message status
  isEdited        Boolean         @default(false)
  editedAt        DateTime?
  isDeleted       Boolean         @default(false)
  deletedAt       DateTime?
  
  // Read receipts
  readBy          Json[]          @default([])
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  chatRoom        ChatRoom        @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  sender          User            @relation(fields: [senderId], references: [id])

  @@index([chatRoomId, createdAt])
  @@index([senderId])
  @@map("messages")
}

// =============================================================================
// PHASE 3: VISA & CULTURAL CONTENT SYSTEMS
// =============================================================================

// Country information
model Country {
  id              String          @id @default(cuid())
  code            String          @unique // ISO 3166-1 alpha-2
  name            String
  officialName    String?
  continent       String
  currency        String
  languages       String[]        @default([])
  timezone        String?
  dialCode        String?
  visaPolicy      Json            @default("{}")
  
  // Travel information
  capitalCity     String?
  majorCities     String[]        @default([])
  emergencyNumbers Json           @default("{}")
  healthRequirements Json         @default("{}")
  safetyLevel     String?         // low, medium, high, extreme
  
  isActive        Boolean         @default(true)
  lastUpdated     DateTime        @default(now())

  visaRequirementsFrom VisaRequirement[] @relation("FromCountry")
  visaRequirementsTo   VisaRequirement[] @relation("ToCountry")
  embassies           Embassy[]
  culturalTips        CulturalTip[]
  travelAdvisories    TravelAdvisory[]

  @@index([code])
  @@index([continent])
  @@map("countries")
}

// Visa requirements between countries
model VisaRequirement {
  id              String          @id @default(cuid())
  fromCountryCode String
  toCountryCode   String
  visaRequired    Boolean         @default(true)
  visaType        String?         // tourist, business, transit, etc.
  maxStayDays     Int?
  processingDays  Int?
  fee             Json?           // Amount and currency
  requirements    Json[]          @default([])
  restrictions    Json[]          @default([])
  notes           String?
  
  validFrom       DateTime?
  validUntil      DateTime?
  isActive        Boolean         @default(true)
  lastUpdated     DateTime        @default(now())

  fromCountry     Country         @relation("FromCountry", fields: [fromCountryCode], references: [code])
  toCountry       Country         @relation("ToCountry", fields: [toCountryCode], references: [code])
  applications    VisaApplication[]

  @@unique([fromCountryCode, toCountryCode, visaType])
  @@index([fromCountryCode])
  @@index([toCountryCode])
  @@map("visa_requirements")
}

// Visa applications tracking
model VisaApplication {
  id              String          @id @default(cuid())
  userId          String
  visaRequirementId String
  applicationNumber String?
  status          String          @default("preparing") // preparing, submitted, processing, approved, rejected
  submittedAt     DateTime?
  expectedDecision DateTime?
  decidedAt       DateTime?
  decision        String?         // approved, rejected
  notes           String?
  
  // Documents
  documentsRequired Json[]        @default([])
  documentsSubmitted Json[]       @default([])
  
  // Application details
  purpose         String?         // tourism, business, transit
  plannedStay     Json?           // dates, duration
  embassy         Json?           // Embassy details
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id])
  visaRequirement VisaRequirement @relation(fields: [visaRequirementId], references: [id])

  @@index([userId, status])
  @@index([status, expectedDecision])
  @@map("visa_applications")
}

// Embassy and consulate information
model Embassy {
  id              String          @id @default(cuid())
  countryCode     String
  name            String
  type            String          @default("embassy") // embassy, consulate, honorary
  address         Json
  contactInfo     Json            @default("{}")
  services        String[]        @default([])
  workingHours    Json?
  appointmentRequired Boolean     @default(true)
  website         String?
  
  isActive        Boolean         @default(true)
  lastUpdated     DateTime        @default(now())

  country         Country         @relation(fields: [countryCode], references: [code])

  @@index([countryCode])
  @@map("embassies")
}

// Cultural tips and information
model CulturalTip {
  id              String          @id @default(cuid())
  userId          String?         // If user-submitted
  countryCode     String
  region          String?         // For regional variations
  category        String          // etiquette, dress, tipping, customs, etc.
  title           String
  content         String
  language        String          @default("en")
  tags            String[]        @default([])
  
  // User-generated content moderation
  isUserGenerated Boolean         @default(false)
  isModerated     Boolean         @default(true)
  moderatedAt     DateTime?
  moderatedBy     String?
  moderationNotes String?
  
  // Engagement
  helpfulCount    Int             @default(0)
  reportCount     Int             @default(0)
  
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User?           @relation(fields: [userId], references: [id])
  country         Country         @relation(fields: [countryCode], references: [code])
  translations    Translation[]

  @@index([countryCode, category])
  @@index([language])
  @@index([isUserGenerated, isModerated])
  @@map("cultural_tips")
}

// Multi-language translations
model Translation {
  id              String          @id @default(cuid())
  entityId        String
  entityType      String          // cultural_tip, poi_description, etc.
  language        String
  content         Json            // Translated content
  translatedBy    String?         // User ID or "system"
  isVerified      Boolean         @default(false)
  verifiedBy      String?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  culturalTip     CulturalTip?    @relation(fields: [entityId], references: [id], onDelete: Cascade)

  @@unique([entityId, entityType, language])
  @@index([entityType, language])
  @@map("translations")
}

// Content moderation queue
model ContentModerationQueue {
  id              String          @id @default(cuid())
  entityId        String
  entityType      String          // post, comment, cultural_tip, etc.
  contentType     String          // text, image, video
  reportedBy      String?
  reportReason    String?
  priority        String          @default("normal") // low, normal, high, urgent
  status          String          @default("pending") // pending, approved, rejected
  moderatedBy     String?
  moderatedAt     DateTime?
  moderationNotes String?
  
  createdAt       DateTime        @default(now())

  @@index([status, priority])
  @@index([entityType, status])
  @@map("content_moderation_queue")
}

// =============================================================================
// REMAINING MODELS CONTINUE IN NEXT PART...
// =============================================================================// =============================================================================
// PHASE 4: MAPS & BOOKING INTEGRATION
// =============================================================================

// Offline map data management
model OfflineMap {
  id              String          @id @default(cuid())
  region          String          // Geographic region identifier
  boundingBox     Json            // Geographic boundaries
  zoomLevel       Int
  tileData        Json?           // Compressed tile data or storage reference
  fileSize        BigInt?         // Size in bytes
  version         String
  provider        String          @default("mapbox") // mapbox, google, osm
  
  downloadedBy    String[]        @default([])
  downloadCount   Int             @default(0)
  isActive        Boolean         @default(true)
  expiresAt       DateTime?       // Cache expiration
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([region, zoomLevel])
  @@index([expiresAt])
  @@map("offline_maps")
}

// Navigation routes
model Route {
  id              String          @id @default(cuid())
  fromLocation    Json            // Start point coordinates
  toLocation      Json            // End point coordinates
  transportMode   String          // walking, driving, transit, cycling
  routeData       Json            // Full route information
  distance        Float?          // In meters
  duration        Int?            // In seconds
  estimatedCost   Json?           // Cost estimate
  
  // Route optimization
  waypoints       Json[]          @default([])
  avoidTolls      Boolean         @default(false)
  avoidHighways   Boolean         @default(false)
  accessibility   Boolean         @default(false)
  
  provider        String          @default("mapbox")
  isActive        Boolean         @default(true)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([transportMode])
  @@map("routes")
}

// Public transit information
model Transit {
  id              String          @id @default(cuid())
  routeId         String?
  provider        String          // Local transit authority
  type            String          // bus, train, metro, tram, ferry
  lineName        String
  direction       String?
  
  // Schedule information
  schedule        Json            // Timetable data
  realTimeUpdates Json?           // Live updates
  frequency       Int?            // Average frequency in minutes
  operatingHours  Json?
  
  // Route details
  stops           Json[]          @default([])
  serviceArea     Json?           // Geographic coverage
  accessibility   Json?           // Wheelchair, audio announcements, etc.
  
  isActive        Boolean         @default(true)
  lastUpdated     DateTime        @default(now())

  route           Route?          @relation(fields: [routeId], references: [id])

  @@index([provider, type])
  @@index([lineName])
  @@map("transit")
}

// Points of Interest database
model PointOfInterest {
  id              String          @id @default(cuid())
  name            String
  description     String?
  category        String          // restaurant, attraction, hotel, shop, etc.
  subcategory     String?
  
  // Location
  latitude        Float
  longitude       Float
  address         String?
  city            String?
  country         String
  placeId         String?         @unique // Google Places ID or similar
  
  // Business information
  website         String?
  phone           String?
  email           String?
  openingHours    Json?
  priceLevel      String?         // free, $, $$, $$$, $$$$
  
  // User engagement
  rating          Float?
  ratingCount     Int             @default(0)
  photos          Json[]          @default([])
  reviews         Json[]          @default([])
  
  // Features and amenities
  amenities       String[]        @default([])
  accessibility   Json?
  paymentMethods  String[]        @default([])
  
  // Administrative
  isVerified      Boolean         @default(false)
  verifiedBy      String?
  verifiedAt      DateTime?
  isActive        Boolean         @default(true)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([latitude, longitude])
  @@index([category, subcategory])
  @@index([city, country])
  @@index([rating])
  @@map("points_of_interest")
}

// Service provider partners
model Partner {
  id              String          @id @default(cuid())
  name            String
  type            String          // booking_platform, tour_operator, insurance, etc.
  description     String?
  logo            String?
  website         String?
  
  // Integration details
  apiCredentials  Json?           // Encrypted API keys
  apiEndpoints    Json?
  commissionRate  Float?          // Percentage
  paymentTerms    Json?
  
  // Business information
  contactInfo     Json?
  address         Json?
  businessLicense String?
  
  // Partnership details
  status          String          @default("active") // active, inactive, suspended
  contractStart   DateTime?
  contractEnd     DateTime?
  serviceTypes    String[]        @default([])
  
  // Performance metrics
  totalBookings   Int             @default(0)
  totalRevenue    Float           @default(0)
  averageRating   Float?
  
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  bookingProviders BookingProvider[]
  deals           Deal[]

  @@index([type, status])
  @@index([status])
  @@map("partners")
}

// Booking integration providers
model BookingProvider {
  id              String          @id @default(cuid())
  partnerId       String
  serviceType     String          // flights, hotels, activities, insurance
  providerName    String
  
  // Integration configuration
  integrationDetails Json          @default("{}")
  endpoints       Json            @default("{}")
  rateLimits      Json?
  
  // Booking flow
  searchCapability Boolean        @default(true)
  bookingCapability Boolean       @default(true)
  cancellationSupport Boolean     @default(false)
  
  // Performance
  averageResponseTime Int?         // milliseconds
  successRate     Float?          // Percentage
  lastHealthCheck DateTime?
  
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  partner         Partner         @relation(fields: [partnerId], references: [id])

  @@index([serviceType, isActive])
  @@index([partnerId])
  @@map("booking_providers")
}

// Price monitoring and alerts
model PriceAlert {
  id              String          @id @default(cuid())
  userId          String
  searchCriteria  Json            // Flight/hotel search parameters
  targetPrice     Float
  currency        String          @default("USD")
  alertFrequency  String          @default("daily") // immediate, daily, weekly
  
  // Alert configuration
  isActive        Boolean         @default(true)
  expiresAt       DateTime?
  lastChecked     DateTime?
  
  // Price tracking
  currentPrice    Float?
  priceHistory    Json[]          @default([])
  lowestPrice     Float?
  lowestPriceDate DateTime?
  
  // Notifications
  lastAlertSent   DateTime?
  alertsSent      Int             @default(0)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id])

  @@index([userId, isActive])
  @@index([expiresAt])
  @@map("price_alerts")
}

// Special deals and offers
model Deal {
  id              String          @id @default(cuid())
  partnerId       String
  title           String
  description     String
  serviceType     String          // flights, hotels, activities, packages
  
  // Deal details
  discountType    String          // percentage, fixed_amount, bogo
  discountValue   Float
  originalPrice   Float?
  discountedPrice Float?
  currency        String          @default("USD")
  
  // Availability
  validFrom       DateTime
  validUntil      DateTime
  maxRedemptions  Int?
  currentRedemptions Int          @default(0)
  
  // Targeting
  targetAudience  Json?           // Geographic, demographic filters
  minimumSpend    Float?
  
  // Terms and conditions
  terms           String?
  restrictions    Json[]          @default([])
  
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  partner         Partner         @relation(fields: [partnerId], references: [id])

  @@index([serviceType, validFrom, validUntil])
  @@index([isActive, validUntil])
  @@map("deals")
}

// =============================================================================
// PHASE 5: ANALYTICS & ADMINISTRATION
// =============================================================================

// User behavior analytics
model UserAnalytics {
  id              String          @id @default(cuid())
  userId          String
  sessionId       String?
  eventType       String          // page_view, click, booking, search, etc.
  eventCategory   String          // navigation, engagement, conversion
  eventAction     String
  eventLabel      String?
  
  // Event context
  page            String?
  referrer        String?
  device          Json?
  location        Json?
  userAgent       String?
  
  // Custom properties
  properties      Json            @default("{}")
  
  // Performance metrics
  loadTime        Int?            // milliseconds
  timeOnPage      Int?            // seconds
  
  timestamp       DateTime        @default(now())

  user            User            @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
  @@index([eventType, timestamp])
  @@index([timestamp]) // For time-series queries
  @@map("user_analytics")
}

// System event logging
model EventLog {
  id              String          @id @default(cuid())
  eventType       String          // system, user_action, error, security
  severity        String          @default("info") // debug, info, warning, error, critical
  source          String          // api, web, mobile, system
  
  // Event details
  message         String
  details         Json?
  
  // Context
  userId          String?
  sessionId       String?
  ipAddress       String?
  userAgent       String?
  endpoint        String?
  httpMethod      String?
  responseCode    Int?
  
  // Performance
  executionTime   Int?            // milliseconds
  memoryUsage     Int?            // bytes
  
  timestamp       DateTime        @default(now())

  @@index([eventType, timestamp])
  @@index([severity, timestamp])
  @@index([userId, timestamp])
  @@index([timestamp]) // For time-series queries
  @@map("event_logs")
}

// Performance metrics tracking
model PerformanceMetric {
  id              String          @id @default(cuid())
  metricName      String          // api_response_time, db_query_time, etc.
  metricType      String          // gauge, counter, histogram
  value           Float
  unit            String?         // ms, bytes, count, percentage
  
  // Context
  service         String?         // api, web, mobile, database
  endpoint        String?
  operation       String?
  
  // Additional metadata
  tags            Json            @default("{}")
  
  timestamp       DateTime        @default(now())

  @@index([metricName, timestamp])
  @@index([service, timestamp])
  @@index([timestamp])
  @@map("performance_metrics")
}

// Comprehensive audit logging
model AuditLog {
  id              String          @id @default(cuid())
  userId          String?
  action          String          // create, update, delete, login, etc.
  entityType      String          // user, itinerary, booking, etc.
  entityId        String?
  
  // Change tracking
  oldValues       Json?
  newValues       Json?
  changedFields   String[]        @default([])
  
  // Request context
  ipAddress       String?
  userAgent       String?
  sessionId       String?
  endpoint        String?
  httpMethod      String?
  
  // Administrative
  reason          String?         // For admin actions
  success         Boolean         @default(true)
  errorMessage    String?
  
  timestamp       DateTime        @default(now())

  user            User?           @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
  @@index([entityType, entityId])
  @@index([action, timestamp])
  @@index([timestamp])
  @@map("audit_logs")
}

// Customer support system
model SupportTicket {
  id              String          @id @default(cuid())
  userId          String
  ticketNumber    String          @unique
  subject         String
  description     String
  category        String          // technical, billing, general, bug_report
  priority        String          @default("normal") // low, normal, high, urgent
  status          String          @default("open") // open, in_progress, resolved, closed
  
  // Assignment
  assignedTo      String?         // Support agent ID
  assignedAt      DateTime?
  
  // Resolution
  resolution      String?
  resolvedAt      DateTime?
  resolvedBy      String?
  
  // Additional information
  attachments     Json[]          @default([])
  tags            String[]        @default([])
  
  // Internal notes
  internalNotes   Json[]          @default([])
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id])
  messages        SupportMessage[]

  @@index([userId, status])
  @@index([status, priority])
  @@index([assignedTo, status])
  @@map("support_tickets")
}

// Support ticket messages
model SupportMessage {
  id              String          @id @default(cuid())
  ticketId        String
  senderId        String?         // User or support agent
  senderType      String          // user, agent, system
  message         String
  attachments     Json[]          @default([])
  isInternal      Boolean         @default(false)
  
  createdAt       DateTime        @default(now())

  ticket          SupportTicket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId, createdAt])
  @@map("support_messages")
}

// Emergency contacts management
model EmergencyContact {
  id              String          @id @default(cuid())
  userId          String
  name            String
  relationship    String          // family, friend, colleague, etc.
  phoneNumber     String
  email           String?
  address         Json?
  notes           String?
  
  // Contact preferences
  isPrimary       Boolean         @default(false)
  allowedToContact Boolean        @default(true)
  preferredContactMethod String   @default("phone") // phone, email, both
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isPrimary])
  @@map("emergency_contacts")
}

// Weather data caching
model WeatherData {
  id              String          @id @default(cuid())
  locationId      String?
  latitude        Float
  longitude       Float
  
  // Current weather
  current         Json?
  
  // Forecast data
  hourlyForecast  Json[]          @default([])
  dailyForecast   Json[]          @default([])
  
  // Weather alerts
  alerts          Json[]          @default([])
  warnings        Json[]          @default([])
  
  // Data source
  provider        String          @default("openweather")
  
  lastUpdated     DateTime        @default(now())
  expiresAt       DateTime

  @@index([latitude, longitude])
  @@index([locationId])
  @@index([expiresAt])
  @@map("weather_data")
}

// Government travel advisories
model TravelAdvisory {
  id              String          @id @default(cuid())
  countryCode     String
  issuingCountry  String          // Country issuing the advisory
  level           String          // normal, caution, avoid, do_not_travel
  title           String
  summary         String
  details         String?
  
  // Specific risks
  riskCategories  String[]        @default([]) // health, security, natural_disaster, etc.
  regions         String[]        @default([]) // Specific regions if not country-wide
  
  // Validity
  issuedAt        DateTime
  lastUpdated     DateTime        @default(now())
  expiresAt       DateTime?
  
  // Source information
  sourceUrl       String?
  sourceAgency    String?
  
  isActive        Boolean         @default(true)

  country         Country         @relation(fields: [countryCode], references: [code])

  @@index([countryCode, level])
  @@index([issuingCountry])
  @@index([lastUpdated])
  @@map("travel_advisories")
}

// =============================================================================
// EXISTING MODELS (Enhanced versions)
// =============================================================================

// Keep existing models with enhancements already defined above
// (Collaborator, Traveler, Transportation, Accommodation, Booking, Payment, Review, Notification, Follow, Block, Report, TravelLogEntry, Location)

// =============================================================================
// ADDITIONAL SYSTEM MODELS
// =============================================================================

// System configuration
model SystemSetting {
  id              String          @id @default(cuid())
  key             String          @unique
  value           Json
  description     String?
  category        String          @default("general")
  isPublic        Boolean         @default(false)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([category])
  @@map("system_settings")
}

// Feature flags
model FeatureFlag {
  id              String          @id @default(cuid())
  name            String          @unique
  description     String?
  isEnabled       Boolean         @default(false)
  
  // Targeting
  userPercentage  Float?          // Percentage of users to enable for
  targetUsers     String[]        @default([])
  targetGroups    String[]        @default([])
  
  // Environment
  environment     String[]        @default(["production"])
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([isEnabled])
  @@map("feature_flags")
}

// File storage metadata
model MediaFile {
  id              String          @id @default(cuid())
  userId          String?
  filename        String
  originalName    String
  mimeType        String
  size            BigInt
  
  // Storage information
  storageProvider String          @default("s3") // s3, cloudinary, local
  storagePath     String
  storageUrl      String?
  
  // Image-specific metadata
  width           Int?
  height          Int?
  
  // Processing
  isProcessed     Boolean         @default(true)
  processingStatus String?        // pending, processing, completed, failed
  thumbnails      Json[]          @default([])
  
  // Security
  isPublic        Boolean         @default(false)
  accessToken     String?
  
  // Context
  entityType      String?         // post, profile, activity, etc.
  entityId        String?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([userId])
  @@index([entityType, entityId])
  @@index([storageProvider])
  @@map("media_files")
}